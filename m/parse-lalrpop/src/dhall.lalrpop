// vim: et ts=2 sw=2
// Bug with reporting one of those "self" as unused.
use ast::{Expr, Term1, Term, Path, Deq, Token, Val, LetStmt, TextEntry, Ident, RecordData};
use actions::new;
use super::Error;
grammar<'input>;

pub Op = { "+", "-", "/", "*", "++", "#", "//", "/\\", "//\\\\", "≡", "&&", "||", "==", "!=" };

Some<T>: Option<T> = T => Some(<>);
Box<T>: Box<T> = T => Box::new(<>);
Paren<T>: T = "(" <T> ")";
Brace<T>: T = "{" <T> "}";
Brack<T>: T = "[" <T> "]";
Angle<T>: T = "<" <T> ">";

List1<S, T>: Deq<T> = {
  <mut l: List1<S, T>> S <el: T>                      => { l.push_back(el); l },
  <el: T>                                             => { let mut d = Deq::new(); d.push_back(el); d },
};

List2<S, T>: Deq<T> = S? <List1<S, T>>;

pub Val: Val<'input> = Box<Expr>;
pub Path: Path<'input> = List1<".", Ident>;

λ = { "λ", "\\" }
α = { "→", "->" }
φ = { "∀", "forall" }

pub Expr: Expr<'input> = {
  Term3                                                     => Expr::Term1(<>),
  <LetStmtList> "in" <Val>                                  => Expr::Let(<>),
  <Box<Term2>> ":" <Val>                                    => Expr::Term1(Term1::Ascribe(<>)),
  <n: Term1> α <v: Val>                                     => Expr::Term1(Term1::Arrow(None, Box::new(Expr::Term1(n)), v)),
  φ "(" <Some<Ident>> ":" <Val> ")" α <Val>                 => Expr::Term1(Term1::Arrow(<>)),
  λ "(" <Ident> <(":" <Val>)?> ")" α <Val>                  => Expr::Lambda(<>),
  "if" <Val> "then" <Val> "else" <Val>                      => Expr::Term1(Term1::IfThenElse(<>)),
};

pub Term3: Term1<'input> = {
  <t: Term3> "with" <p: Path> "=" <v: Term2>                => Term1::With(Box::new(t), p, Box::new(v)),
  Term2,
};

pub Term2: Term1<'input> = {
  <Box<Term2>> <Op> <Box<Term1>>                            => Term1::Operation(<>),
  Term1,
};

pub Term1: Term1<'input> = {
  Term                                                      => Term1::Term(<>),
  <Box<Term1>> <Term>                                       => Term1::Evaluation(<>),
  <Box<Term1>> "::" <Record>                                => Term1::Construct(<>),
  "merge" <Record> <Box<Term>>                              => Term1::Term(Term::Merge(<>)),
};

pub Term: Term<'input> = {
  Natural                                                   => new::term::integer((false, <>)),
  Negative                                                  => new::term::integer((true, &<>[1..])),
  Double                                                    => new::term::double(<>),
  Ident                                                     => new::term::var((<>, "0")),
  <Ident> "@" <Natural>                                     => new::term::var((<>)),
  <Box<Term>> "." <Ident>                                   => new::term::field_access((<>)),
  <Box<Term>> "." "{" <List2<",", Term1>> "}"               => new::term::project((<>)),
  <Box<Term>> "." "(" <List2<",", Term1>> ")"               => new::term::select((<>)),
  "[" "]"                                                   => new::term::list(Deq::<Val<'input>>::new()),
  "[" <List2<",", Val>> "]"                                 => new::term::list(<>),
  "{" "}"                                                   => new::term::type_record(RecordData::default()),
  "{" <List2<",", TypeRecordField>> "}"                     => new::term::type_record(<>),
  "<" <List2<"|", TypeEnumField>> ">"                       => new::term::type_enum(<>),
  "(" <Val> ")"                                             => new::term::expr(<>),
  "\"" <TextEntryList<"\"">>                                => new::term::text((1, <>)),
  "''" <TextEntryList<"''">>                                => new::term::text((2, <>)),
  Record                                                    => new::term::record(<>),
  Uri Guard?                                                => new::term::import((<>)),
};

pub Record: RecordData<'input> = {
  "{" <List2<",", RecordField>> "}",
  "{" "=" "}"                                               => <_>::default()
};

pub RecordField: (Path<'input>, Val<'input>) = {
  Ident                     => (ast::deq(<>), Box::new(ast::var_expr(<>))),
  <Path> "=" <Val>          => (<>),
};

pub TypeRecordField: (Path<'input>, Val<'input>) = {
  <Path> ":" <Val>          => (<>),
};

pub TypeEnumField: (Ident<'input>, Option<Val<'input>>) = {
  <Ident> <(":" <Val>)?>    => (<>),
};

pub Uri = { RelUri, HttpUri };

pub Guard = Sha256 ("?" <Uri>)?;

TextEntryList<END>: Deq<TextEntry<'input>> = {
  END =>
    Deq::new(),

  <t: RawText> <v: ("${" <Val> "}")?>  <mut l: TextEntryList<END>> => {
    l.push_front((t, v));
    l
  },
};

pub LetStmtList: Deq<LetStmt<'input>> = {
  LetStmt => ast::deq(<>),
  <mut l: LetStmtList> <s: LetStmt> => { l.push_back(s); l },
};

pub LetStmt =
  "let" <Ident> <(":" <Val>)?> "=" <Val>
;

extern {
  type Location = usize;
  type Error = Error;
  enum Token<'input> {
    "⩓"       => Token::Conj1(<&'input str>),
    "//\\\\"  => Token::Conj1(<&'input str>),
    "∧"       => Token::Conj2(<&'input str>),
    "/\\"     => Token::Conj2(<&'input str>),
    "⫽"       => Token::Alt(<&'input str>),
    "//"      => Token::Alt(<&'input str>),
    "\\"      => Token::Lambda(<&'input str>),
    "λ"       => Token::Lambda(<&'input str>),
    "->"      => Token::Arrow(<&'input str>),
    "→"       => Token::Arrow(<&'input str>),
    "="       => Token::Equals(<&'input str>),
    "let"     => Token::Let(<&'input str>),
    "in"      => Token::In(<&'input str>),
    "("       => Token::LPar(<&'input str>),
    ")"       => Token::RPar(<&'input str>),
    ":"       => Token::Colon(<&'input str>),
    "forall"  => Token::Forall(<&'input str>),
    "∀"       => Token::Forall(<&'input str>),
    "++"      => Token::TextConcat(<&'input str>),
    "#"       => Token::ListConcat(<&'input str>),
    "+"       => Token::Plus(<&'input str>),
    "/"       => Token::Div(<&'input str>),
    "*"       => Token::Star(<&'input str>),
    "-"       => Token::Minus(<&'input str>),
    "{"       => Token::LBrace(<&'input str>),
    "}"       => Token::RBrace(<&'input str>),
    "["       => Token::LBracket(<&'input str>),
    "]"       => Token::RBracket(<&'input str>),
    "<"       => Token::LAngle(<&'input str>),
    ">"       => Token::RAngle(<&'input str>),
    ","       => Token::Comma(<&'input str>),
    "."       => Token::Dot(<&'input str>),
    "|"       => Token::Pipe(<&'input str>),
    "\""      => Token::DQuote(<&'input str>),
    "'"       => Token::SQuote(<&'input str>),
    "?"       => Token::Questionmark(<&'input str>),
    "≡"       => Token::Equiv(<&'input str>),
    "@"       => Token::Scope(<&'input str>),
    "::"      => Token::DColon(<&'input str>),
    "''"      => Token::DDQuote(<&'input str>),
    "${"      => Token::TextImbue(<&'input str>),
    "&&"      => Token::LogicConj(<&'input str>),
    "||"      => Token::LogicDisj(<&'input str>),
    "=="      => Token::LogicEq(<&'input str>),
    "!="      => Token::LogicNeq(<&'input str>),
    "if"      => Token::If(<&'input str>),
    "then"    => Token::Then(<&'input str>),
    "else"    => Token::Else(<&'input str>),
    "merge"   => Token::Merge(<&'input str>),
    "with"    => Token::With(<&'input str>),
    Text      => Token::Text(<&'input str>),
    Natural   => Token::Natural(<&'input str>),
    Negative  => Token::Negative(<&'input str>),
    Double    => Token::Double(<&'input str>),
    Ident     => Token::Ident(<&'input str>),
    RelUri    => Token::RelUri(<&'input str>),
    HttpUri   => Token::HttpUri(<&'input str>),
    Sha256    => Token::Sha256(<&'input str>),
    RawText   => Token::RawText(<&'input str>),
  }
}
